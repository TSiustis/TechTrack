@page "/equipment"
@using TechTrack.Common.Dtos.Equipments
@using TechTrack.Common.Interfaces.HttpClients
@using TechTrack.Common.Pagination
@using TechTrack.Common.ViewModel.Equipments
@using TechTrack.Domain.Enums

@inject IEquipmentsHttpClientService EquipmentsService
@inject NavigationManager NavigationManager

@rendermode InteractiveAuto

<h3>Equipments</h3>

<div class="row mb-3">
    <div class="col">
        <input type="text" class="form-control" placeholder="Search by Name" @bind="filter.Name">
    </div>
    <div class="col">
        <button class="btn btn-primary" @onclick="LoadEquipments">Search</button>
    </div>
</div>

<div class="row mb-3">
    <div class="col">
        <select class="form-control" @bind="filter.Status" @onclick="LoadEquipments">
            <option value="">All Statuses</option>
            @foreach (EquipmentStatus status in Enum.GetValues(typeof(EquipmentStatus)))
            {
                <option value="@status">@status.GetDescription()</option>
            }
        </select>
    </div>
</div>

@if (equipments == null)
{
    <p><em>Loading...</em></p>
}
else if (equipments?.Data?.Count == 0)
{
    <p>No equipments found. You can add new equipments.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Type</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var equipment in equipments?.Data)
            {
                <tr>
                    <td>@equipment.Name</td>
                    <td>@equipment.Type</td>
                    <td>@equipment.Status</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => UpdateEquipment(equipment.Id)">Update</button>
                        <button class="btn btn-danger" @onclick="() => RetireEquipment(equipment.Id)">Retire</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    
 <PaginatedList CurrentPage="@currentPage"
                           PageCount="@equipments.TotalPages"
                           VisiblePages="5"
                           ShowFirstLast="true"
                           ShowPageNumbers="true"
                           FirstText="&laquo;"
                           LastText="&raquo;"
                           NextText="&rsaquo;"
                           PreviousText="&lsaquo;"
                       OnPageChanged="(async e => { currentPage = e; await LoadEquipments();})">
                           </PaginatedList>
}

<button class="btn btn-success" @onclick="AddEquipment">Add Equipment</button>


@code {
    private PaginatedResult<EquipmentOutputVm>? equipments;
    private EquipmentInputVm filter = new();
    private int currentPage = 1;

    protected override async Task OnInitializedAsync()
    {
        await LoadEquipments();
    }

    private async Task LoadEquipments()
    {
        equipments = await EquipmentsService.GetEquipmentsAsync(filter);
    }

    private async Task AddEquipment()
    {
        NavigationManager.NavigateTo("/equipment/add");
    }

    private async Task UpdateEquipment(Guid id)
    {
        NavigationManager.NavigateTo($"/equipment/update/{id}");
    }

    private async Task RetireEquipment(Guid id)
    {
        await EquipmentsService.RetireEquipmentAsync(id);
        await LoadEquipments();
    }
}
