@page "/equipment/update/{EquipmentId:guid}"
@using AutoMapper
@using TechTrack.Common.Dtos.Equipments
@using TechTrack.Common.Interfaces.HttpClients
@inject IEquipmentsHttpClientService EquipmentsService
@inject NavigationManager NavigationManager
@inject IMapper Mapper

<h3>Update Equipment</h3>

@if (equipmentDto == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="@equipmentDto" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="name">Name:</label>
            <InputText id="name" class="form-control" @bind-Value="equipmentDto.Name" />
        </div>
        <div class="form-group">
            <label for="type">Type:</label>
            <InputText id="type" class="form-control" @bind-Value="equipmentDto.Type" />
        </div>
        <div class="form-group">
            <label for="status">Status:</label>
            <InputSelect id="status" class="form-control" @bind-Value="equipmentDto.Status">
                <option value="">Select a status</option>
                <option value="Available">Available</option>
                <option value="Assigned">Assigned</option>
                <option value="Retired">Retired</option>
            </InputSelect>
        </div>

        <button type="submit" class="btn btn-primary">Update Equipment</button>
    </EditForm>
}

@code {
    [Parameter]
    public Guid EquipmentId { get; set; }

    private EquipmentDto equipmentDto;

    protected override async Task OnInitializedAsync()
    {
        equipmentDto = await EquipmentsService.GetEquipmentAsync(EquipmentId);
    }

    private async Task HandleValidSubmit()
    {
        var equipmentForUpdateDto = Mapper.Map<EquipmentForUpdateDto>(equipmentDto);
        await EquipmentsService.UpdateEquipmentAsync(EquipmentId, equipmentForUpdateDto);
        NavigationManager.NavigateTo("/equipments");
    }
}
