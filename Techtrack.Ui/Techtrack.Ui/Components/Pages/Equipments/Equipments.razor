@page "/equipments"
@using System.Text.Json
@using TechTrack.Common.Interfaces.HttpClients
@using TechTrack.Common.Pagination
@using TechTrack.Common.ViewModel.Equipments
@inject IEquipmentsHttpClientService EquipmentsHttpClientService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<h3>Equipments</h3>

@if (equipments == null)
{
    <p><em>Loading...</em></p>
}
else if (equipments?.Data?.Count == 0)
{
    <p>No equipments found. You can add new equipments.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Type</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var equipment in equipments.Data)
            {
                <tr>
                    <td>@equipment.Name</td>
                    <td>@equipment.Type</td>
                    <td>@equipment.Status</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => UpdateEquipment(equipment.Id)">Update</button>
                        <button class="btn btn-danger" @onclick="() => RetireEquipment(equipment.Id)">Retire</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<button class="btn btn-success" @onclick="AddEquipment">Add Equipment</button>

@code {
    private PaginatedResult<EquipmentOutputVm>? equipments;
    private EquipmentInputVm filter = new();

    protected override async Task OnInitializedAsync()
    {
        equipments = await EquipmentsHttpClientService.GetEquipmentsAsync(filter);
    }

    private async Task AddEquipment()
    {
        NavigationManager.NavigateTo("/equipments/add");
    }

    private async Task UpdateEquipment(Guid id)
    {
        NavigationManager.NavigateTo($"/equipments/update/{id}");
    }

    private async Task RetireEquipment(Guid id)
    {
        await EquipmentsHttpClientService.RetireEquipmentAsync(id);
        equipments = await EquipmentsHttpClientService.GetEquipmentsAsync(filter);
    }
}
