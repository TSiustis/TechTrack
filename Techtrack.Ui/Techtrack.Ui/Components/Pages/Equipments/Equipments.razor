@page "/equipments"
@using System.Text.Json
@using TechTrack.Common.Interfaces.HttpClients
@using TechTrack.Common.Pagination
@using TechTrack.Common.ViewModel.Equipments
@inject IEquipmentsHttpClientService EquipmentsHttpClientService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<h3>Equipments</h3>

<div class="row">
    <div class="col-md-6">
        <div class="input-group mb-3">
            <span class="input-group-text">Search</span>
            <input type="text" class="form-control" @bind="filter.Name" placeholder="Search by name">
            <input type="text" class="form-control" @bind="filter.Type" placeholder="Search by type">
            <button class="btn btn-primary" @onclick="ApplyFilter">Apply Filter</button>
        </div>
    </div>
</div>

@if (equipments == null)
{
    <p><em>Loading...</em></p>
}
else if (equipments?.Data?.Count == 0)
{
    <p>No equipments found. You can add new equipments.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th @onclick="() => SortByColumn(nameof(EquipmentOutputVm.Name))">
                    Name <i class="fas fa-sort" @onclick="() => SortByColumn(nameof(EquipmentOutputVm.Name))"></i> 
                </th>
                <th @onclick="() => SortByColumn(nameof(EquipmentOutputVm.Type))">
                    Type <i class="fas fa-sort" @onclick="() => SortByColumn(nameof(EquipmentOutputVm.Type))"></i>
                </th>
                <th @onclick="() => SortByColumn(nameof(EquipmentOutputVm.Status))">
                    Status <i class="fas fa-sort" @onclick="() => SortByColumn(nameof(EquipmentOutputVm.Status))"></i>
                </th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var equipment in equipments.Data)
            {
                <tr>
                    <td>@equipment.Name</td>
                    <td>@equipment.Type</td>
                    <td>@equipment.Status</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => UpdateEquipment(equipment.Id)">Update</button>
                        <button class="btn btn-danger" @onclick="() => RetireEquipment(equipment.Id)">Retire</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <PaginatedList CurrentPage="@currentPage"
                   PageCount="@equipments.TotalPages"
                   VisiblePages="5"
                   ShowFirstLast="true"
                   ShowPageNumbers="true"
                   FirstText="&laquo;"
                   LastText="&raquo;"
                   NextText="&rsaquo;"
                   PreviousText="&lsaquo;"
                   OnPageChanged="(async e => { currentPage = e; await LoadDistributions();})">
    </PaginatedList>
}

<button class="btn btn-success" @onclick="AddEquipment">Add Equipment</button>

@code {
    private PaginatedResult<EquipmentOutputVm>? equipments;
    private EquipmentInputVm filter = new();
    private int currentPage = 1;
    private bool isAscending = true;
    private string sortByColumn = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadEquipments();
    }

    private async Task LoadEquipments()
    {
        equipments = await EquipmentsHttpClientService.GetEquipmentsAsync(filter);
    }

    private async Task ApplyFilter()
    {
        await LoadEquipments();
    }

    private async Task AddEquipment()
    {
        NavigationManager.NavigateTo("/equipments/add");
    }

    private async Task UpdateEquipment(Guid id)
    {
        NavigationManager.NavigateTo($"/equipments/update/{id}");
    }

    private async Task RetireEquipment(Guid id)
    {
        await EquipmentsHttpClientService.RetireEquipmentAsync(id);
        await LoadEquipments();
    }

    private async Task SortByColumn(string columnName)
    {
        if (columnName == sortByColumn)
        {
            isAscending = !isAscending;
        }
        else
        {
            isAscending = true;
            sortByColumn = columnName;
        }

        filter.SortBy = sortByColumn;
        filter.SortDirection = isAscending ? "Asc" : "Desc";

        await LoadEquipments();
    }
}
