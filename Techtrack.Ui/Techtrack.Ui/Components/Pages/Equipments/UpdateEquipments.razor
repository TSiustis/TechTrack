@page "/equipments/update/{id:guid}"
@using System.Text.Json
@using TechTrack.Common.Interfaces.HttpClients
@using TechTrack.Common.Pagination
@using TechTrack.Common.Dtos.Equipments
@inject IEquipmentsHttpClientService EquipmentsHttpClientService
@inject NavigationManager NavigationManager

@attribute [StreamRendering]

<h3>Update Equipment</h3>

@if (equipment == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <form>
        <div class="form-group">
            <label for="name">Name</label>
            <input type="text" class="form-control" id="name" @bind="equipment.Name">
        </div>
        <div class="form-group">
            <label for="type">Type</label>
            <input type="text" class="form-control" id="type" @bind="equipment.Type">
        </div>
        <div class="form-group">
            <label for="status">Status</label>
            <input type="text" class="form-control" id="status" @bind="equipment.Status">
        </div>
        <button type="submit" class="btn btn-primary" @onclick="UpdateEquipment">Update</button>
    </form>
}

@code {
    private EquipmentDto? equipment;
    [Parameter]
    public Guid id { get; set; }

    protected override async Task OnInitializedAsync()
    {
         equipment = await EquipmentsHttpClientService.GetEquipmentAsync(id);
    }

    async Task UpdateEquipment()
    {
        if (equipment != null)
        {
            var equipmentForUpdateDto = new EquipmentForUpdateDto
                {
                    // Populate with updated data
                    Name = equipment.Name,
                    Type = equipment.Type,
                    Status = equipment.Status
                };

            await EquipmentsHttpClientService.UpdateEquipmentAsync(id, equipmentForUpdateDto);
            NavigationManager.NavigateTo("/equipments");
        }
    }
}
